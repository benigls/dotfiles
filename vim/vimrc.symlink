" Load plugins from vim-plug
source ~/.vim/plugins.vim

"""""""""" General
syntax on
filetype plugin indent on

set nocompatible " not compatible with vi


" Tab control
set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'"
set tabstop=4 " the visible width of tabs
set softtabstop=4 " edit as if the tabs are 4 characters wide
set shiftwidth=4 " number of spaces to use for indent and unindent
set expandtab

set ttyfast " faster redrawing
set autoread " detect when a file is changed


" make backspace behave in a sane manner¬
set backspace=indent,eol,start


" Searching
set ignorecase " case insensitive searching
set smartcase " case-sensitive if expresson contains a capital letter
set hlsearch
set incsearch
set nolazyredraw " don't redraw while executing macros

set magic " Set magic on, for regex

set showmatch
set mat=2 " how many tenths of a second to blink"

set autoindent
set smartindent
set colorcolumn=80
set laststatus=2

set nobackup
set nowritebackup
set noswapfile

set clipboard=unnamed
set number " show the current line number


" error bells
set noerrorbells
set visualbell
set tm=50


"""""""""" Colorscheme
set encoding=utf8
set t_Co=256 " Explicitly tell vim that the terminal supports 256 colors
let base16colorspace=256
execute "colorscheme base16-".$THEME

set wrap "turn on line wrapping
set wrapmargin=8 " wrap lines when coming within n characters from side
set linebreak " set soft wrapping


" Toggle invisible characters
set linebreak
set invlist
set listchars=tab:▸\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
highlight SpecialKey ctermbg=none " make the highlighting of tabs less annoying
set showbreak=...

set autoindent " automatically set indent of new line
set smartindent


"""""""""" User Interface
set so=3 " set 3 lines to the cursors - when moving vertical
set wildmenu " enhanced command line completion
set hidden " current buffer can be put into background
set showcmd " show incomplete commands
set noshowmode " don't show which mode disabled for PowerLine
set wildmode=list:longest " complete files like a shell
set shell=$SHELL
set cmdheight=1 " command bar height

set title " set terminal title

match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'


"""""""""" Files
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp


"""""""""" Mappings

" set a map leader for more key combos
let mapleader = ','
let g:mapleader = ','

" Normal mode map ; to :
nnoremap ; :

" clear highlighted search¬
noremap <space> :set hlsearch! hlsearch?<cr>

" TODO: Fix this not working
" indentations
" nmap <leader>[ <<<cr>
" nmap <leader>] >><cr>

" Disalbe Arrow keys
nnoremap <up>    <nop>
nnoremap <down>  <nop>
nnoremap <left>  <nop>
nnoremap <right> <nop>
inoremap <up>    <nop>
inoremap <down>  <nop>
inoremap <left>  <nop>
inoremap <right> <nop>

" Automatically removing all trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e


"""""""""" Plugins

" NERDTree
let g:NERDTreeQuitOnOpen = 0
let NERDTreeShowHidden = 1

nnoremap <C-c> :NERDTreeToggle<cr>

" ctrlp
let g:ctrlp_show_hidden = 1
let g:ctrlp_custom_ignore = '.git\|node_modules\|bower_components\|__pycache__\|tmp\'

" Airline
let g:airline_powerline_fonts = 1
let g:airline_theme='base16'

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'
let g:airline_left_alt_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_python_exec = '/usr/bin/python'

" Emmet
let g:user_emmet_leader_key='<C-D>'

" TODO: Add key bindings
" fugitive git bindings
" nnoremap <space>gs :Gstatus<cr>
" nnoremap <space>gd :Gdiff<CR>
" nnoremap <space>gps :Dispatch! git push<CR>
" nnoremap <space>gpl :Dispatch! git pull<CR>
